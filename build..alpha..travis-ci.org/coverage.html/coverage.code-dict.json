{"/home/travis/build/npmtest/node-npmtest-sails-migrations/test.js":"/* istanbul instrument in package npmtest_sails_migrations */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-sails-migrations/lib.npmtest_sails_migrations.js":"/* istanbul instrument in package npmtest_sails_migrations */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_sails_migrations = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_sails_migrations = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-sails-migrations/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-sails-migrations && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_sails_migrations */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_sails_migrations\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_sails_migrations.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_sails_migrations.rollup.js'] =\n            local.assetsDict['/assets.npmtest_sails_migrations.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_sails_migrations.__dirname +\n                    '/lib.npmtest_sails_migrations.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-sails-migrations/node_modules/sails-migrations/index.js":"module.exports = require('./lib/sails-migrations.js');","/home/travis/build/npmtest/node-npmtest-sails-migrations/node_modules/sails-migrations/lib/sails-migrations.js":"module.exports = {\n  generate: require('./sails-migrations/generate.js'),\n  migrate: require('./sails-migrations/migrate_to_latest.js'),\n  rollback: require('./sails-migrations/rollback.js'),\n  createDatabase: require('./sails-migrations/create_database.js'),\n  dropDatabase: require('./sails-migrations/drop_database.js'),\n  currentVersion: require('./sails-migrations/current_version.js'),\n  status: require('./sails-migrations/status.js')\n};","/home/travis/build/npmtest/node-npmtest-sails-migrations/node_modules/sails-migrations/lib/sails-migrations/generate.js":"var migratorLoader = require('./helpers/migrator_loader.js');\n\nfunction getMigrationName(name) {\n  return name.replace(/( )/g, '_') || 'unnamed_migration';\n}\n\nfunction generateMigration(name, options) {\n  name = getMigrationName(name);\n  return migratorLoader.load().then(function(migrator) {\n    return migrator.make(name, options)\n  })\n}\n\n\nmodule.exports = generateMigration;","/home/travis/build/npmtest/node-npmtest-sails-migrations/node_modules/sails-migrations/lib/sails-migrations/helpers/migrator_loader.js":"const configLoader = require('./config_loader.js');\nconst knex = require('knex');\n\nfunction load() {\n  return configLoader.load().then(function(config) {\n    //probably a good idea to wrap this with something to abstract knex\n    return knex(config).migrate;\n  });\n\n}\n\nexports.load = load;","/home/travis/build/npmtest/node-npmtest-sails-migrations/node_modules/sails-migrations/lib/sails-migrations/helpers/config_loader.js":"const path = require('path');\nconst url = require('url');\nconst _ = require('lodash');\nconst Promise = require('bluebird');\nconst SailsIntegration = require('./sails_integration');\n\nconst sailsToKnexClient = {\n  'sails-postgresql': 'pg',\n  'sails-mysql': 'mysql'\n};\n\nfunction getModulesPath(basePath) {\n  const baseAppPath = basePath || process.cwd();\n  return path.join(baseAppPath, 'node_modules');\n}\n\nfunction getClientFromSailsConfig(sailsConfig) {\n  var version = sailsConfig.defaultAdapter.version;\n  var adapter;\n  if (_.contains([\"0.10\", \"0.11\", \"0.12\"], version)) {\n    adapter = sailsConfig.defaultAdapter.config.adapter;\n  } else if (version === '0.9') {\n    adapter = sailsConfig.defaultAdapter.identity;\n  }\n  return sailsToKnexClient[adapter];\n}\n\nfunction getConfigFromSailsConfig(sailsConfig) {\n  const connection = getConnectionFromSailsConfig(sailsConfig)\n\n  const client = getClientFromSailsConfig(sailsConfig);\n\n  const migrations = {\n    tableName: 'sails_migrations',\n    directory: './db/migrations'\n  };\n\n  return {\n    client: client,\n    connection: connection,\n    migrations: migrations\n  };\n}\n\nfunction getConnectionFromSailsConfig(sailsConfig) {\n  if (typeof sailsConfig.defaultAdapter.config.url !== 'undefined' && sailsConfig.defaultAdapter.config.url !== null) {\n    var dbUrl = url.parse(sailsConfig.defaultAdapter.config.url);\n    return {\n      host: dbUrl.hostname,\n      user: dbUrl.auth.split(':')[0],\n      port: dbUrl.port,\n      database: dbUrl.path.slice(1),\n      password: dbUrl.auth.split(':')[1]\n    }\n  } else {\n    const fullConfig = _.defaults({}, sailsConfig.defaultAdapter.config, sailsConfig.defaultAdapter.defaults);\n    return {\n      host: fullConfig.host,\n      user: fullConfig.user,\n      port: fullConfig.port,\n      database: fullConfig.database,\n      password: fullConfig.password,\n      ssl: fullConfig.ssl || false\n    };\n  }\n}\n\nfunction getConfig(basePath) {\n  const modulesPath = getModulesPath(basePath);\n\n  return Promise.promisify(SailsIntegration.loadSailsConfig)(modulesPath).then(getConfigFromSailsConfig);\n}\n\n\nexports.load = getConfig;\n","/home/travis/build/npmtest/node-npmtest-sails-migrations/node_modules/sails-migrations/lib/sails-migrations/helpers/sails_integration.js":"const path = require('path');\nconst _ = require('lodash');\n\nfunction getSailsVersion(sailsObject) {\n  var version = sailsObject.version;\n  if (sailsObject.config.adapters) {\n    return \"0.9\";\n  } else {\n    // get the minor version\n    return version.split('.').splice(0, 2).join('.');\n  }\n}\n\n\nfunction SailsIntegration() {\n}\n\nvar cache = null;\n\nsailsPath = function (modulesPath) {\n  return path.join(modulesPath, 'sails');\n};\n\nSailsIntegration.loadSailsConfig = function (modulesPath, cb) {\n  var options, sails;\n\n  if (cache) { return cb(null, cache); }\n\n  var sailsPathStr = sailsPath(modulesPath);\n  var sailsPackage = require(path.join(sailsPathStr,'package'));\n\n  var rconf;\n  try {\n    rconf = require(path.join(sailsPathStr,'/lib/app/configuration/rc'));\n  }\n  catch(e) {\n    // If rc does not exist then set to empty object\n    rconf = {};\n  }\n\n  options = _.merge(rconf,{\n    globals:   false,\n    loadHooks: ['moduleloader', 'userconfig'],\n    appPath:   path.join(modulesPath, \"..\")\n  });\n\n  sails = require(sailsPathStr);\n  return sails.load(options, function (err) {\n    if (err) { return cb(err); }\n    cache = SailsIntegration.getSailsConfig(modulesPath, sails);\n    return cb(null, cache);\n  });\n};\n\nSailsIntegration.getSailsConfig = function (modulesPath, sails) {\n  var adapter, dbConfig, defaultAdapterName, moduleName;\n  const sailsVersion = getSailsVersion(sails);\n  switch (true) {\n    case sailsVersion === \"0.9\":\n      defaultAdapterName = sails.config.adapters[\"default\"];\n      dbConfig = sails.config.adapters[defaultAdapterName];\n      moduleName = dbConfig.module;\n      break;\n    case _.contains([\"0.10\", \"0.11\", \"0.12\"], sailsVersion):\n      defaultAdapterName = sails.config.models.connection;\n      dbConfig = sails.config.connections[defaultAdapterName];\n      moduleName = dbConfig.adapter;\n  }\n  adapter = require(path.join(modulesPath, moduleName));\n  adapter.config = dbConfig;\n  adapter.version = sailsVersion;\n\n  return {\n    migrationLibPath:   __dirname,\n    defaultAdapterName: defaultAdapterName,\n    defaultAdapter:     adapter,\n    sailsPath:          sailsPath(modulesPath)\n  };\n};\n\n\nmodule.exports = SailsIntegration;\n","/home/travis/build/npmtest/node-npmtest-sails-migrations/node_modules/sails-migrations/lib/sails-migrations/migrate_to_latest.js":"var migratorLoader = require('./helpers/migrator_loader.js');\nvar fs = require('fs');\nvar path = require('path');\nvar errors = require('./errors');\n\nfunction latest() {\n  return migratorLoader.load().then(function(migrator) {\n    var dbDir = path.resolve(migrator.config.directory);\n    if (fs.existsSync(dbDir)) {\n      return migrator.latest()\n    } else {\n      throw new errors.MigrationsFolderDoesNotExists(dbDir + \" does not exists\", migrator.config);\n    }\n  })\n\n}\nmodule.exports = latest;","/home/travis/build/npmtest/node-npmtest-sails-migrations/node_modules/sails-migrations/lib/sails-migrations/errors.js":"const util = require('util');\n\nfunction DatabaseAlreadyExists(message, config) {\n  Error.call(this);\n  Error.captureStackTrace(this, arguments.callee);\n  this.message = message;\n  this.config = config;\n}\n\nutil.inherits(DatabaseAlreadyExists, Error);\n\nfunction MigrationsFolderDoesNotExists(message, config) {\n  Error.call(this);\n  Error.captureStackTrace(this, arguments.callee);\n  this.message = message;\n  this.config = config;\n}\n\nutil.inherits(MigrationsFolderDoesNotExists, Error);\n\n\nexports.DatabaseAlreadyExists = DatabaseAlreadyExists;\nexports.MigrationsFolderDoesNotExists = MigrationsFolderDoesNotExists;","/home/travis/build/npmtest/node-npmtest-sails-migrations/node_modules/sails-migrations/lib/sails-migrations/rollback.js":"const knex = require('knex');\nconst Promise = require('bluebird');\nconst ConfigLoader = require('./helpers/config_loader.js');\n\n\nfunction rollback(){\n  return ConfigLoader.load().then(function(config){\n    return knex(config).migrate.rollback();\n  });\n}\n\nmodule.exports = rollback;","/home/travis/build/npmtest/node-npmtest-sails-migrations/node_modules/sails-migrations/lib/sails-migrations/create_database.js":"const databaseTasks = require('./helpers/database_tasks.js');\nconst Promise = require('bluebird');\nconst ConfigLoader = require('./helpers/config_loader.js');\n\n\nfunction createDatabase() {\n  return ConfigLoader.load().then(function(config){\n    return Promise.promisify(databaseTasks.create)(config).then(function() {\n      return config;\n    })\n  })\n}\n\nmodule.exports = createDatabase;","/home/travis/build/npmtest/node-npmtest-sails-migrations/node_modules/sails-migrations/lib/sails-migrations/helpers/database_tasks.js":"const exec = require('child_process').exec;\nconst _ = require('lodash');\nconst errors = require('../errors');\n\nconst PG_CLIENT_NAME = 'pg';\nconst MYSQL_CLIENT_NAME = 'mysql';\n\nconst clientToDefaultDbTable = {\n  'pg': 'postgres',\n  'mysql': 'mysql'\n}\n\nfunction escapeIdentifier(config, identifier) {\n  var escapeChar = config.client == MYSQL_CLIENT_NAME ? \"`\" : \"\\\"\";\n\n  return escapeChar + identifier + escapeChar;\n}\n\nfunction DatabaseTasks() {}\n\n\nDatabaseTasks.executeQuery = function (config, query, cb) {\n  //config.debug = true;\n  database = config.connection.database\n  config.connection.database = clientToDefaultDbTable[config.client]; //bug in knex, if you pass a db, it will fail to drop/create a db :-(\n  var knex = require('knex')(config);\n  knex.raw(query).then(cb, cb)\n};\n\n/*\n * config -\n *   client: 'mysql' or 'postgresql'\n *   database: the database name\n *   user: db user\n *   password: db connection password\n *   host: db host\n * */\nDatabaseTasks.create = function (config, cb) {\n  var database = config.connection.database;\n\n  DatabaseTasks.executeQuery(config, \"CREATE DATABASE \" + escapeIdentifier(config, database), function (err, stdout, stdin) {\n    config.connection.database = database;\n    if (err instanceof Error){\n      cb(err, config);\n    } else {\n      cb(null, config);\n    }\n  });\n};\n\n/*\n * config -\n *   client: 'mysql' or 'postgresql'\n *   database: the database name\n *   user: db user\n *   password: db connection password\n *   host: db host\n * */\nDatabaseTasks.drop = function (config, cb) {\n  var database = config.connection.database;\n  DatabaseTasks.executeQuery(config, \"DROP DATABASE \" + escapeIdentifier(config, database), function (err, stdout, stdin) {\n    config.connection.database = database;\n    if (err instanceof Error){\n      cb(err, config);\n    } else {\n      cb(null, config);\n    }\n  });\n};\n\nmodule.exports = DatabaseTasks;\n","/home/travis/build/npmtest/node-npmtest-sails-migrations/node_modules/sails-migrations/lib/sails-migrations/drop_database.js":"const databaseTasks = require('./helpers/database_tasks.js');\nconst Promise = require('bluebird');\nconst ConfigLoader = require('./helpers/config_loader.js');\n\n\nfunction dropDatabase(){\n  return ConfigLoader.load().then(function(config){\n    return Promise.promisify(databaseTasks.drop)(config).then(function(config) {\n      return config;\n    });\n  });\n}\n\nmodule.exports = dropDatabase;","/home/travis/build/npmtest/node-npmtest-sails-migrations/node_modules/sails-migrations/lib/sails-migrations/current_version.js":"const knex = require('knex');\nconst Promise = require('bluebird');\nconst ConfigLoader = require('./helpers/config_loader.js');\n\n\nfunction currentVersion(){\n  return ConfigLoader.load().then(function(config){\n    return knex(config).migrate.currentVersion();\n  });\n}\n\nmodule.exports = currentVersion;","/home/travis/build/npmtest/node-npmtest-sails-migrations/node_modules/sails-migrations/lib/sails-migrations/status.js":"const knex = require('knex');\nconst ConfigLoader = require('./helpers/config_loader.js');\n\n\nfunction status() {\n  return ConfigLoader.load().then(function (config) {\n    var knexInstance = knex(config);\n    return knexInstance.schema.hasTable(config.migrations.tableName).then(function(exists) {\n      if(exists) {\n        return knexInstance.select('*').from(config.migrations.tableName).orderBy('id')\n      } else {\n        return []\n      }\n    }).then(function(completed) {\n      return [knexInstance.migrate._listAll(), completed]\n    })\n  });\n\n}\n\nmodule.exports = status;\n"}